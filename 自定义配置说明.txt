第一层级——在数据库中配置单位信息和玩家信息：
一、tb_unittype表保存每一种单位的属性信息，字段如下：
1、uuid：
唯一id
2、name：
前台显示名（唯一）
3、jsonp：
单位的基础属性，为了方便修改这个字段中的内容并非JSON格式，而是js的对象直接量，在前台通过eval方法转为js对象
以其中“跳虫”单位为例：
{
        frontUVs:[0,0,1,1],//正面图片纹理坐标
        backUVs:[0,0,1,1],//背面图片纹理坐标
        skills:[0,3],//技能列表
        standalone:true,//是否可以单独放入场中，比如装备类的单位不可以单独入场，必须附着在已有的单位之上
        hp:2,//最大HP
        mp:0,//最大MP
        at:2,//攻击力
        sp:0,//最大护盾
        Cost1:1,//第一种资源的消耗量
        Cost2:0,//第二种资源的消耗量
        power:10//行动力
}
4、mainpic：
正面图片URL
5、mainback：
背面图片URL（在测试程序中没有用到）
6、comment：
注释
二、tb_user表保存玩家信息
1、uuid：
唯一id
2、userid：
用户名
3、password：
密码（在测试程序中没有用到）
4、sfky：
是否可用，1表示可用
5、pgid：
playgroundid，表示这个用户属于哪个测试场景
6、ksrq：
用户的开始日期
7、jsrq：
用户的结束日期
8、jsonstate：
用户状态
以test3场景中的b用户为例：
{
        index_startpoint:2//表示这个用户出现在2号出生点
}
三、tb_userunit2表保存玩家单位信息
1、uuid：
单位的唯一id
2、ownerid：
单位所有者
3、sfky：
是否可用，1表示可用
4、jsonstate：
单位状态
以a玩家的人族基地为例：
{
        belongto:"a",//废弃字段
     state:"inarea",//在棋盘上，与此相对“inhand”表示在手牌中
     areaname:"mesharea_ground1_4_2",//所在地块的地块名
}
也可以在这里设置hp、mp等属性，这可以让单位以“非满状态”出现在场景中。
5、pgid：
playgroundid，表示这个用户属于哪个测试场景
6、ispublic：
卡牌类型是否公开，如果不公开非裁判的其他玩家将只能看到默认的卡背图案，1表示公开
7、unittype：
单位类型名

第二层级——在技能库中定义技能：
技能库位于前端的JS/PAGE/Data/data_skill.js文件的list_skilldata数组中，默认的技能库中有几个具有代表性的技能：
一、普通移动1
{
        index:0,//在技能库中的索引，对应单位类型表中的skills字段
        name:"普通移动1",//技能名
        comment:"移动一格",//注释
        skilltype:"selectarea",//类型1，这里表示这个技能需要选择一个地块作为释放目标
        skilltype2:"move",//类型2，表示这是一个移动类技能
        isdefault:true,//是否可以作为默认技能，为true表示不需要在技能栏中选取，可以直接通过鼠标拖动释放
        range:1,//技能范围
        do:function(unit){//方法1，unit对象是技能释放者
            if(unit.state=="inarea")//如果已经进入棋盘
            {
                //选取目标，三个参数分别是技能释放者、技能对象、选定目标后的回调方法
                skillTargetSelect(unit,list_skilldata[0],list_skilldata[0].do2);
            }


        },//需要选择一个目标
        do2:function(unit,target){//方法2，两个参数分别是技能的发出者和承受者
            //建立一个action对象
            var action ={//根据对象的不同这里可能有不同的属性
                unit:unit,
                target:target,
                skill:list_skilldata[0]
            }
            moveAction(action);//启动“移动”行为
        }
    },
二、远程攻击1
{
        index:1,
        name:"远程攻击1",
        comment:"可跨越一格的远程攻击",
        skilltype:"selectunit",//选择其他单位作为目标
        skilltype2:"attack",//技能类型为攻击
        isdefault:true,
        range:2,
        do:function(unit){
            if(unit.state=="inarea")
            {
                //选择目标
                skillTargetSelect(unit,list_skilldata[1],list_skilldata[1].do2);
            }


        },//需要选择一个目标
        do2:function(unit,target){
            //console.log("do2");
            var action ={
                unit:unit,
                target:target,
                skill:list_skilldata[1]
            }
            throwAction(action);//启动“发射”行为
        }
    },
三、对空攻击
{
        index:2,
        name:"对空攻击",
        comment:"使攻击可以对空",
        skilltype:"selecttarget",//在选取目标阶段起作用
        skilltype2:"passiveskill",//是一个被动技能
        isdefault:false,
        do:function(unit){//这里unit是潜在的技能承受者
            if(unit.couldbeTarget.fly==0)
            {//对应的被动技能“飞行”则可以更早的将unit.couldbeTarget.fly设为0，如果最后unit.couldbeTarget的所有属性均为1则表示unit可以作为技能释放目标
                unit.couldbeTarget.fly=1;
            }
        },
    },
四、护甲1
{
        index:5,
        name:"护甲1",
        comment:"受到普通伤害-1",
        skilltype:"inaction",//技能在inaction阶段起作用
        skilltype2:"passiveskill",
        isdefault:false,
        do:function(unit,action){
            if(unit.state=="inarea")
            {//这里可能有各种各样的方法
                if(action.demage)//将行为的demage属性-1
                {
                    action.demage-=1;
                }
            }
        },
    },
玩家可以根据自己的需要自定义技能库，这要求玩家具备入门级的JavaScript编程知识。

第三层级——自定义行为
框架在rule.js文件中预定义了四种行为：
moveAction：移动行为
attackAction：近战攻击行为
throwAction：发射行为
attacktoAction：近战后占领目标地点行为

每个行为分成以下阶段：
beforeAction：行为发动前，执行技能释放者的各种被动技能对action进行修改，比如增强攻击力、选取目标附近的其他目标作为次要目标等
inAction：行为发动中，执行技能承受者的各种被动技能对action进行修改，比如降低伤害、反弹伤害等，同时计算该行为对单位hp、mp、sp等属性的影响。
afterAction：行为发生后，判断是否发生单位摧毁，attacktoAction还会再触发一个moveAction，

每个行为都可能触发一定数量的动画效果，这些动画效果写在CardMesh2.js文件中，比如changeStrip可以修改生命条、ani_floatstr可以再单位上浮现文字、ani_shake可以让单位晃动一下。

每个行为也可能触发WebSocket通信，本框架的行为由普通用户触发后，由裁判world用户进行统一计算，唯一的计算结果通过网络同步给所有普通用户，WebSocket代码在BasicTest/WsHandler.js文件中，比如每个action开始时会广播一个"bc_actionstart"类型的信息，每个action结束时会广播一个"finish_action"类型的信息。

玩家可以对行为的种类、动画、通信进行修改，这需要玩家具备入门级的Babylon.js引擎知识和WebSocket通信知识。

第四层级——自定义场景
测试程序建立了一个6*9的平面棋盘，用球体代表玩家、用卡牌代表单位，玩家可以对棋盘的布局进行修改或者用3D模型代替球体和卡牌，这需要玩家进一步阅读框架代码。

